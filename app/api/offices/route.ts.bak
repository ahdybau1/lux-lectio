import { NextResponse } from 'next/server';
import { getJourLiturgique, getOffice } from '@/lib/offices';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const date = searchParams.get('date');
  const type = searchParams.get('type');

  if (!date) {
    return NextResponse.json(
      { error: "Le paramètre 'date' est requis" },
      { status: 400 }
    );
  }

  const jourLiturgique = getJourLiturgique(date);
  
  if (!jourLiturgique) {
    return NextResponse.json(
      { error: "Aucun contenu liturgique disponible pour cette date" },
      { status: 404 }
    );
  }

  if (type) {
    const office = getOffice(date, type);
    if (!office) {
      return NextResponse.json(
        { error: `Office ${type} non trouvé pour cette date` },
        { status: 404 }
      );
    }
    return NextResponse.json({
      ...jourLiturgique.metadata,
      office
    });
  }

  return NextResponse.json(jourLiturgique);
}
export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const date = searchParams.get('date');
  const type = searchParams.get('type');

  if (!date) {
    return NextResponse.json(
      { error: "Le paramètre 'date' est requis" },
      { status: 400 }
    );
  }

  const jourLiturgique = getJourLiturgique(date);
  const result: any = {
    date: jourLiturgique.date,
    jour_semaine: jourLiturgique.jour_semaine,
    temps_liturgique: jourLiturgique.temps_liturgique,
    semaine_psautier: jourLiturgique.semaine_psautier,
    celebration: jourLiturgique.celebration,
    offices: {}
  };

  if (type) {
    // Si un type spécifique est demandé, ne renvoyer que cet office
    if (!OFFICE_TYPES.includes(type)) {
      return NextResponse.json(
        { error: `Type d'office invalide: ${type}` },
        { status: 400 }
      );
    }
    result.offices[type] = generateOffice(type, date);
  } else {
    // Sinon, renvoyer tous les offices
    for (const officeType of OFFICE_TYPES) {
      result.offices[officeType] = generateOffice(officeType, date);
    }
  }

  return NextResponse.json(result);
}
